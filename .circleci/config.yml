version: 2


presets:
  defaults: &defaults
    working_directory: ~/src
    docker:
      - image: omisegoimages/ewallet-builder:stable
    environment: &env
      IMAGE_NAME: "omisego/ewallet"

  restore_repo: &restore_repo
    restore_cache:
      name: Restoring repository
      keys:
        - v1-repo-{{ .Branch }}-{{ .Revision }}
        - v1-repo-{{ .Branch }}-
        - v1-repo-

  restore_ewallet_deps: &restore_ewallet_deps
    restore_cache:
      name: Restoring eWallet dependencies from cache
      keys:
        - v1-ewallet-deps-{{ checksum "mix.lock" }}
        - v1-ewallet-deps-

  restore_ewallet_assets_deps: &restore_ewallet_assets_deps
    restore_cache:
      name: Restoring eWallet assets dependencies from cache
      keys:
        - v1-ewallet-assets-deps-{{ checksum "apps/admin_panel/assets/yarn.lock" }}
        - v1-ewallet-assets-deps-

  restore_ewallet_test_build: &restore_ewallet_test_build
    restore_cache:
      name: Restoring eWallet test artifacts from cache
      keys:
        - v1-ewallet-test-build-{{ checksum "mix.exs" }}
        - v1-ewallet-test-build-

  restore_ewallet_prod_build: &restore_ewallet_prod_build
    restore_cache:
      name: Restoring eWallet production artifacts from cache
      keys:
        - v1-ewallet-prod-build-{{ checksum "mix.exs" }}
        - v1-ewallet-prod-build-

  restore_docker_image: &restore_docker_image
    restore_cache:
      name: Restoring Docker image artifacts from cache
      keys:
        - v1-docker-image-{{ checksum "Dockerfile" }}
        - v1-docker-image-

  attach_workspace: &attach_workspace
    attach_workspace:
      name: Attaching workspace
      at: /tmp/workspace


jobs:
  checkout_code:
    <<: *defaults
    steps:
      - *restore_repo
      - checkout
      - save_cache:
          name: Saving repository
          key: v1-repo-{{ .Branch }}-{{ .Revision }}
          paths:
            - .

  build_test:
    <<: *defaults
    steps:
      - *restore_repo
      - *restore_ewallet_deps
      - *restore_ewallet_test_build
      - run:
          name: Retrieving eWallet dependencies
          command: |
            # Force rebuilding bcrypt_elixir otherwise it's gonna fail loading NIFs
            find deps/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            make deps-ewallet
      - save_cache:
          name: Caching eWallet dependencies
          key: v1-ewallet-deps-{{ checksum "mix.lock" }}
          paths:
            - deps
      - run:
          name: Building eWallet in test environment
          command: |
            # Force rebuilding bcrypt_elixir otherwise it's gonna fail loading NIFs
            find _build/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            make build-test
      - save_cache:
          name: Caching eWallet test artifacts
          key: v1-ewallet-test-build-{{ checksum "mix.exs" }}
          paths:
            - _build/test

  lint_format:
    <<: *defaults
    steps:
      - *restore_repo
      - *restore_ewallet_deps
      - *restore_ewallet_test_build
      - run:
          name: Checking code formattings
          command: make check-format

  lint_credo:
    <<: *defaults
    steps:
      - *restore_repo
      - *restore_ewallet_deps
      - *restore_ewallet_test_build
      - run:
          name: Checking credo
          command: |
            # Force rebuilding bcrypt_elixir otherwise it's gonna fail loading NIFs
            find deps/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            find _build/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            make check-credo
          environment:
            MIX_ENV: test

  test_ewallet:
    <<: *defaults
    docker:
      - image: omisegoimages/ewallet-builder:stable
      - image: postgres:9.6-alpine
    steps:
      - *restore_repo
      - *restore_ewallet_deps
      - *restore_ewallet_test_build
      - run:
          name: Running eWallet tests
          command: |
            # Force rebuilding bcrypt_elixir otherwise it's gonna fail loading NIFs
            find deps/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            find _build/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            # TODO: Remove me after done testing pipeline.
            make test-ewallet || true
          environment:
            DATABASE_URL: postgresql://postgres:@localhost:5432/ewallet
            LOCAL_LEDGER_DATABASE_URL: postgresql://postgres:@localhost:5432/ledger
            USE_JUNIT: 1
            MIX_ENV: test

  test_assets:
    <<: *defaults
    steps:
      - *restore_repo
      - *restore_ewallet_assets_deps
      - run:
          name: Retriving eWallet assets dependencies
          command: make deps-assets
      - save_cache:
          name: Caching eWallet assets dependencies
          key: v1-ewallet-assets-deps-{{ checksum "apps/admin_panel/assets/yarn.lock" }}
          paths:
            - apps/admin_panel/assets/node_modules
      - run:
          name: Running assets tests
          command: make test-assets

  build_ewallet:
    <<: *defaults
    steps:
      - *restore_repo
      - *restore_ewallet_deps
      - *restore_ewallet_assets_deps
      - *restore_ewallet_prod_build
      - setup_remote_docker
      - run:
          name: Building eWallet in production environment
          command: |
            # Force rebuilding bcrypt_elixir otherwise it's gonna fail loading NIFs
            find deps/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            find _build/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            make build-prod
      - save_cache:
          name: Caching eWallet artifacts
          key: v1-ewallet-prod-build-{{ checksum "mix.exs" }}
          paths:
            - _build/prod/.mix
            - _build/prod/consolidated
            - _build/prod/lib
      - *restore_docker_image
      - run:
          name: Loading Docker image layer cache
          command: |
            docker load -i ~/caches/docker-layers.tar || true
      - run:
          name: Building Docker image
          command: |
            REL_VERSION=$(awk '/version:/ { gsub(/[^0-9a-z\.\-]+/, "", $2); print $2 }' < apps/ewallet/mix.exs)
            mv "_build/prod/rel/ewallet/releases/$REL_VERSION/ewallet.tar.gz" ewallet.tar.gz
            docker build --cache-from "$IMAGE_NAME" -t "$IMAGE_NAME" .
      - run:
          name: Creating Docker image layer cache
          command: |
            mkdir -p ~/caches /tmp/workspace
            docker save -o ~/caches/docker-layers.tar "$IMAGE_NAME"
            docker save -o /tmp/workspace/docker-image.tar "$IMAGE_NAME"
      - save_cache:
          name: Saving Docker image layer cache
          paths:
            - ~/caches/docker-layers.tar
          key: v1-docker-image-{{ checksum "Dockerfile" }}
      - persist_to_workspace:
          name: Persisting workspace
          root: /tmp/workspace
          paths:
            - docker-image.tar

  test_ewallet_e2e:
    <<: *defaults
    environment:
      <<: *env
      EWALLET_SECRET_KEY: 5cosmdLuudJobtwtuRz2MRXJW879boJs32rQJleMc2Y=
      LOCAL_LEDGER_SECRET_KEY: cJVT4y5iZkQAcY94xvmjt9+TXMEJ23bSqGj0ufL+W6U=
    steps:
      - setup_remote_docker
      - *attach_workspace
      - run:
          name: Running PostgreSQL for E2E
          command: |
            docker network create net0
            docker run -d -p 5432:5432 \
                --rm \
                --name db \
                --net net0 \
              postgres:9.6-alpine
      - run:
          name: Setting up database for E2E
          command: |
            docker load -i /tmp/workspace/docker-image.tar
            docker run \
                --rm \
                --net net0 \
                -e DATABASE_URL=postgresql://postgres:@db:5432/ewallet \
                -e LOCAL_LEDGER_DATABASE_URL=postgresql://postgres:@db:5432/ledger \
                -e EWALLET_SECRET_KEY=$EWALLET_SECRET_KEY \
                -e LOCAL_LEDGER_SECRET_KEY=$LOCAL_LEDGER_SECRET_KEY \
              "$IMAGE_NAME" \
              initdb
            docker run \
                --rm \
                --net net0 \
                -e E2E_ENABLED=yes \
                -e E2E_TEST_ADMIN_EMAIL=admin@example.com \
                -e E2E_TEST_ADMIN_PASSWORD=passw0rd0 \
                -e E2E_TEST_ADMIN_1_EMAIL=admin1@example.com \
                -e E2E_TEST_ADMIN_1_PASSWORD=passw0rd1 \
                -e DATABASE_URL=postgresql://postgres:@db:5432/ewallet \
                -e LOCAL_LEDGER_DATABASE_URL=postgresql://postgres:@db:5432/ledger \
                -e EWALLET_SECRET_KEY=$EWALLET_SECRET_KEY \
                -e LOCAL_LEDGER_SECRET_KEY=$LOCAL_LEDGER_SECRET_KEY \
              "$IMAGE_NAME" \
              seed -e
      - run:
          name: Running eWallet for E2E
          command: |
            docker run -d -p 4000:4000 \
                --rm \
                --name ewallet \
                --net net0 \
                -e DATABASE_URL=postgresql://postgres:@db:5432/ewallet \
                -e LOCAL_LEDGER_DATABASE_URL=postgresql://postgres:@db:5432/ledger \
                -e EWALLET_SECRET_KEY=$EWALLET_SECRET_KEY \
                -e LOCAL_LEDGER_SECRET_KEY=$LOCAL_LEDGER_SECRET_KEY \
              "$IMAGE_NAME"
      - run:
          name: Running E2E
          command: |
            git clone https://github.com/omisego/e2e.git e2e
            cd e2e
            pipenv install
            pipenv run robot tests
          environment:
            E2E_HTTP_HOST: http://localhost:4000
            WS_HTTP_HOST: ws://localhost:4000
            E2E_TEST_ADMIN_EMAIL: admin@example.com
            E2E_TEST_ADMIN_PASSWORD: passw0rd0
            E2E_TEST_ADMIN_1_EMAIL: admin1@example.com
            E2E_TEST_ADMIN_1_PASSWORD: passw0rd1

  publish_ewallet:
    <<: *defaults
    steps:
      - setup_remote_docker
      - *attach_workspace
      - run:
          name: Publishing Docker image
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker load -i /tmp/workspace/docker-image.tar

            IMAGE_TAG=""

            if [ -n "$CIRCLE_TAG" ]; then
                _ver="${CIRCLE_TAG#*v}"

                # Reduce tags from v1.0.0-pre.1 to 1.0 1.0.0-pre and 1.0.0-pre.1
                while true; do
                    case "$_ver" in
                        *.* ) IMAGE_TAG="$_ver $IMAGE_TAG"; _ver="${_ver%.*}";;
                        * )   break;;
                    esac
                done

                # In case the commit is HEAD of master branch, also tag stable.
                if [ -n "$CIRCLE_REPOSITORY_URL" ] && [ -n "$CIRCLE_SHA1" ]; then
                    _ref="refs/heads/master"
                    _head="$(git ls-remote "$CIRCLE_REPOSITORY_URL" "$_ref" | awk '{ print $1 }')"
                    if [ "$CIRCLE_SHA1" = "$_head" ]; then
                        IMAGE_TAG="stable $IMAGE_TAG"
                    fi
                fi
            elif [ "$CIRCLE_BRANCH" = "master" ]; then
                IMAGE_TAG="dev"
                IMAGE_TAG="dev-$(git rev-parse --short HEAD)"
            fi

            for tag in $IMAGE_TAG; do
                docker tag "$IMAGE_NAME" "$IMAGE_NAME:$tag"
                docker push "$IMAGE_NAME:$tag"
            done


filters:
  only_develop: &only_develop
    filters:
      branches:
        ignore:
          - master

  only_mainline: &only_mainline
    filters:
      branches:
        only:
          - master
          - circleci-build
      tags:
        only: /^v.*/


workflows:
  version: 2
  test_build:
    jobs:
      - checkout_code
      - build_test:
          requires:
            - checkout_code

      - lint_format:
          <<: *only_develop
          requires:
            - build_test
      - lint_credo:
          <<: *only_develop
          requires:
            - build_test

      - test_ewallet:
          requires:
            - build_test
      - test_assets:
          requires:
            - build_test

      - build_ewallet:
          <<: *only_mainline
          requires:
            - test_ewallet
            - test_assets
      - test_ewallet_e2e:
          <<: *only_mainline
          requires:
            - build_ewallet

      - publish_ewallet:
          <<: *only_mainline
          requires:
            - test_ewallet_e2e
